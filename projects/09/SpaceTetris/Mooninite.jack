class Mooninite {

    field int x, y; // top-left corner of sprite

    constructor Mooninite new(int Ax, int Ay) {
        let x = Ax;
        let y = 32*16*Ay;
        do draw();
        return this;
    }

    method int getX() {
        return x;
    }
        
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    method void draw() {
        var int memAddress;
        var int location;
        let location = x + y;
        let memAddress = 16384 + location;
        do Memory.poke(memAddress + 0, 0);
        do Memory.poke(memAddress + 32, 1792);
        do Memory.poke(memAddress + 64, 1280);
        do Memory.poke(memAddress + 96, 1528);
        do Memory.poke(memAddress + 128, 1048);
        do Memory.poke(memAddress + 160, 7736);
        do Memory.poke(memAddress + 192, 4968);
        do Memory.poke(memAddress + 224, 12620);
        do Memory.poke(memAddress + 256, 21034);
        do Memory.poke(memAddress + 288, -28663);
        do Memory.poke(memAddress + 320, -27671);
        do Memory.poke(memAddress + 352, 4105);
        do Memory.poke(memAddress + 384, 8184);
        do Memory.poke(memAddress + 416, 576);
        do Memory.poke(memAddress + 448, 576);
        do Memory.poke(memAddress + 480, 3696);
        return;
    }

    method void erase() {
        var int memAddress;
        var int location;
        let location = x + y;
        let memAddress = 16384 + location;
        do Memory.poke(memAddress + 0, 0);
        do Memory.poke(memAddress + 32, 0);
        do Memory.poke(memAddress + 64, 0);
        do Memory.poke(memAddress + 96, 0);
        do Memory.poke(memAddress + 128, 0);
        do Memory.poke(memAddress + 160, 0);
        do Memory.poke(memAddress + 192, 0);
        do Memory.poke(memAddress + 224, 0);
        do Memory.poke(memAddress + 256, 0);
        do Memory.poke(memAddress + 288, 0);
        do Memory.poke(memAddress + 320, 0);
        do Memory.poke(memAddress + 352, 0);
        do Memory.poke(memAddress + 384, 0);
        do Memory.poke(memAddress + 416, 0);
        do Memory.poke(memAddress + 448, 0);
        do Memory.poke(memAddress + 480, 0);
        return;
    }

    method void moveLeft() {
        if (x > 0) {
            do Screen.setColor(false);
            do erase();
            let x = x - 1;
            do draw();
        }
        return;
    }

    method void moveRight() {
        if (x < 31) {
            do Screen.setColor(false);
            do erase();
            let x = x + 1;
            do draw();
        }
        return;
    }

    method Bullet fireGun() {
        var Bullet bullet;
        let bullet = Bullet.new(x, 14);
        return bullet;
    }
}
