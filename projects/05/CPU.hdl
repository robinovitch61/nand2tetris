// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Break up instruction bit for readability
    And16(
        a[0..15]=true,
        b=instruction,
        out[0..2]=jmp,
        out[3]=storeInM,
        out[4]=storeInD,
        out[5]=storeInA,
        out[6]=no,
        out[7]=f,
        out[8]=ny,
        out[9]=zy,
        out[10]=nx,
        out[11]=zx,
        out[12]=AMSelector,
        out[15]=isCInstruction // all these control bits only matter if C instruction, otherwise loads 15 bits into A
    );
    Not(in=isCInstruction, out=isAInstruction);

    // Write to M=RAM[A] when a C instruction asserts storeInM
    And(a=storeInM, b=isCInstruction, out=writeM);

    //// D Register: load alu output in to D when C instruction asserts storeInD
    And(a=storeInD, b=isCInstruction, out=DLoad);
    DRegister(in=aluOut, load=DLoad, out=D);

    //// A Register: load value in to A when (A instruction) or (C instruction asserts storeInA)
    Or(a=isAInstruction, b=storeInA, out=ALoad);
    Mux16(a=instruction, b=aluOut, sel=isCInstruction, out=AInput);
    ARegister(in=AInput, load=ALoad, out=A, out[0..14]=addressM);

    //// ALU
    Mux16(a=A, b=inM, sel=AMSelector, out=AorM);
    ALU(
        x=D,
        y=AorM,
        zx=zx, nx=nx, zy=zy, ny=ny, f=f, no=no,
        out=aluOut,
        out=outM,
        zr=isZero,
        ng=isNeg
    );

    //// PC
    Not(in=isZero, out=isNonZero);
    Not(in=isNeg, out=isPos);
    And(a=isNonZero, b=isPos, out=JGT);
    Or(a=isZero, b=isPos, out=JGE);
    Or(a=isZero, b=isNeg, out=JLE);
    Mux8Way16( // use like Mux8Way1
        a=false, // 000, no jump, null
        b[0]=JGT, // 001, out>0 jump, JGT
        c[0]=isZero, // 010, out=0 jump, JEQ
        d[0]=JGE, // 011, out>=0 jump, JGE
        e[0]=isNeg, // 100, out<0 jump, JLT
        f[0]=isNonZero, // 101, out!=0 jump, JNE
        g[0]=JLE, // 110, out<=0 jump, JLE
        h=true, // 111, jump, JMP
        sel=jmp,
        out[0]=maybeJump
    );
    // if C Instruction and jmp bits confirm possible jump, jump
    And(a=maybeJump, b=isCInstruction, out=jumpConfirmed);
    PC(in=A, load=jumpConfirmed, inc=true, reset=reset, out[0..14]=pc);
}