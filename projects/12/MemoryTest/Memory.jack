// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram, heap;
    static int freeList;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let heap = 2048;
        let heap[0] = 0; // next
        let heap[1] = 14335; // length
        let freeList = heap;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int blockBase, block, offset;

        if (size < 1) {
            let size = 1; // need at least one for blockBase pointer
        }

        let blockBase = freeList;
        while (blockBase[1] < (size + 2)) { // while block too small
            if (blockBase[0] = 0) {
                do Sys.error(404); // no next block
            } else {
                let blockBase = blockBase[0];
            }
        }

        // found block! (first available)
        let offset = blockBase[1] + 2 - size;
        let block = blockBase + offset;
        let blockBase[offset - 1] = size;
        let blockBase[offset - 2] = 0;
        let blockBase[1] = blockBase[1] - size - 2;
        return block;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var int blockBase;
        
        let blockBase = freeList;
        while (~(blockBase[0] = 0)) {
            let blockBase = blockBase[0];
        }
        // blockBase now pointing at final block
        let blockBase[0] = o - 2;
        return;
    }    
}
