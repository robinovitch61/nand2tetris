// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 

class Memory {
    static Array RAM, FREE_LIST;

    /** Initializes the class. */
    function void init() {
        let RAM = 0;
        let FREE_LIST = 2048;
        let FREE_LIST[0] = null; // next
        let FREE_LIST[1] = 14334; // length ((16383 - 2048 + 1) - 2)
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return RAM[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let RAM[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int reqSize, oldBlock, newBlock;

        if (size < 0) {
            do Sys.error(1);
        }

        let reqSize = size + 2;
        let oldBlock = FREE_LIST;
        while (oldBlock[1] < reqSize) { // while block too small
            if (oldBlock[0] = null) {
                do Sys.error(404); // no next block
            } else {
                let oldBlock = oldBlock[0]; // try next block
            }
        }

        // found block! (first available)
        // oldBlock now points to the start address of a memory block with enough space
        // where oldBlock[0] = pointer to next segment (could be null)
        // and oldBlock[1] = size of current segment
        let oldBlock[1] = oldBlock[1] - reqSize; // adjust old block size
        let newBlock = oldBlock + oldBlock[1] + 2;
        let newBlock[0] = null;
        let newBlock[1] = size;
        return newBlock;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var int oldBlock;
        
        let oldBlock = FREE_LIST;
        while (~(oldBlock[0] = null)) {
            let oldBlock = oldBlock[0];
        }
        // oldBlock now pointing at final block
        let oldBlock[0] = o - 2;
        return;
    }    
}
