// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array str;
    field int length;
    field int maxLen;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        // can remove this when not testing in isolation
        if (maxLength < 1) {
            let maxLength = 1;
        }

        let str = Array.new(maxLength);
        let length = 0;
        let maxLen = maxLength;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (length < maxLen) {
            let str[length] = c;
            let length = length + 1;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (length > 0) {
            let length = length - 1;
        }
        return;
    }

    /** Convert digit to char */
    function int digitToChar(int digit) {
        return 48 + digit; // 48 is character code for zero
    }

    /** Convert char to digit */
    function int charToDigit(char character) {
        return character - 48; // 48 is character code for zero
    }

    /** Check if string is negative */
    method boolean strIsNegative() {
        if ((length > 0) & (str[0] = 45)) { // 45 is char code for '-'
            return true;
        } else {
            return false;
        }
    }

    /** Append "-" char to represent as negative */
    method void makeStrNegative() {
        do appendChar(45); // 45 is char code for '-'
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int val, idx;
        var boolean isNeg;
        
        let isNeg = strIsNegative();
        if (isNeg) {
            let idx = 1;
        } else {
            let idx = 0;
        }

        let val = 0;
        while (idx < length) {
            let val = (val * 10) + String.charToDigit(str[idx]);
            let idx = idx + 1;
        }

        if (isNeg) {
            let val = -val;
        }
        return val;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        // clear string
        let length = 0;
        
        if (val < 0) {
            let val = -val;
            do makeStrNegative();
        }

        do setIntHelper(val);
        return;
    }

    method void setIntHelper(int val) {
        var int lastDigit, lastChar, quotient;

        // lastDigit = val % 10
        let quotient = val / 10;
        let lastDigit = val - (10 * quotient);

        // lastChar = char representing lastDigit
        let lastChar = String.digitToChar(lastDigit);

        if (val < 10) {
            do appendChar(lastChar);
        } else {
            let val = val / 10;
            do setIntHelper(val);
            do appendChar(lastChar);
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128; // may be different with my compiler
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129; // may be different with my compiler
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
