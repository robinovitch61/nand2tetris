// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static boolean COLOR;
    static int BASE, PX_ACROSS, PX_DOWN, PX_WORD, NUM_WORDS_ACROSS, NUM_WORDS;

    /** Initializes the Screen. */
    function void init() {
        let COLOR = true;
        let BASE = 16384;
        let PX_ACROSS = 512;
        let PX_DOWN = 256;
        let PX_WORD = 16;
        let NUM_WORDS_ACROSS = PX_ACROSS / PX_WORD;
        let NUM_WORDS = PX_DOWN * NUM_WORDS_ACROSS;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int currWord;

        let currWord = 0;
        while (currWord < NUM_WORDS) {
            let BASE[currWord] = 0;
            let currWord = currWord + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let COLOR = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int addr, prevVal, mask;

        let addr = (NUM_WORDS_ACROSS * y) + (x / PX_WORD);
        let prevVal = Memory.peek(BASE + addr);

        // optimization trick: n % 2^i = n & (2^i - 1), so n % 2^4 = n & 15
        // from https://stackoverflow.com/questions/3072665/bitwise-and-in-place-of-modulus-operator
        let mask = Math.twoToThe(x & 15);

        if (COLOR) {
            do Memory.poke(BASE + addr, prevVal | mask);
        } else {
            do Memory.poke(BASE + addr, prevVal & (~mask));
        }
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        return;
    }
}
