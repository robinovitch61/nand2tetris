// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static boolean COLOR;
    static int BASE, PX_ACROSS, PX_DOWN, PX_WORD, NUM_WORDS_ACROSS, NUM_WORDS;

    /** Initializes the Screen. */
    function void init() {
        let COLOR = true;
        let BASE = 16384;
        let PX_ACROSS = 512;
        let PX_DOWN = 256;
        let PX_WORD = 16;
        let NUM_WORDS_ACROSS = PX_ACROSS / PX_WORD;
        let NUM_WORDS = PX_DOWN * NUM_WORDS_ACROSS;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int currWord;

        let currWord = 0;
        while (currWord < NUM_WORDS) {
            let BASE[currWord] = 0;
            let currWord = currWord + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let COLOR = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int addr, prevVal, mask;

        let addr = (NUM_WORDS_ACROSS * y) + (x / PX_WORD);
        let prevVal = Memory.peek(BASE + addr);

        // optimization trick: n % 2^i = n & (2^i - 1), so n % 2^4 = n & 15
        // from https://stackoverflow.com/questions/3072665/bitwise-and-in-place-of-modulus-operator
        let mask = Math.twoToThe(x & 15);

        if (COLOR) {
            do Memory.poke(BASE + addr, prevVal | mask);
        } else {
            do Memory.poke(BASE + addr, prevVal & (~mask));
        }
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        // horizontal line
        if (y1 = y2) {
            do Screen.drawHorizontalLine(x1, x2, y1);
            return;
        }

        // vertical line
        if (x1 = x2) {
            do Screen.drawVerticalLine(y1, y2, x1);
            return;
        }

        // diagonal line
        do Screen.drawDiagonalLine(x1, y1, x2, y2);
        return;
    }

    /** Draw horizontal line */
    function void drawHorizontalLine(int x1, int x2, int y) {
        var int currVal, endVal, addr;
        if (x1 < x2) {
            let currVal = x1;
            let endVal = x2;
        } else {
            let currVal = x2;
            let endVal = x1;
        }

        // first block
        while ((currVal & 15 > 0) & (currVal < (endVal + 1))) {
            do Screen.drawPixel(currVal, y);
            let currVal = currVal + 1;
        }

        // middle blocks all full
        while (currVal < (endVal - PX_WORD)) {
            let addr = (NUM_WORDS_ACROSS * y) + (currVal / PX_WORD);
            if (COLOR) {
                do Memory.poke(BASE + addr, -1);
            } else {
                do Memory.poke(BASE + addr, 0);
            }
            let currVal = currVal + PX_WORD;
        }

        // last block
        while (currVal < (endVal + 1)) {
            do Screen.drawPixel(currVal, y);
            let currVal = currVal + 1;
        }
        return;
    }

    /** Draw vertical line */
    function void drawVerticalLine(int y1, int y2, int x) {
        var int currVal, endVal, vertBit, addr;
        let vertBit = Math.twoToThe(x & 15);

        if (y1 < y2) {
            let currVal = y1;
            let endVal = y2;
        } else {
            let currVal = y2;
            let endVal = y1;
        }

        while (currVal < (endVal + 1)) {
            let addr = (NUM_WORDS_ACROSS * currVal) + (x / PX_WORD);
            do Memory.poke(BASE + addr, vertBit);
            let currVal = currVal + 1;
        }
        return;
    }

    /** Draw diagonal line */
    function void drawDiagonalLine(int x1, int y1, int x2, int y2) {
        var int totalXDist, totalYDist, xDist, yDist, diff;
        var boolean xNeg, yNeg;
        
        let xDist = 0;
        let yDist = 0;
        let totalXDist = x2 - x1;
        let totalYDist = y2 - y1;

        if (totalXDist < 0) {
            let xNeg = true;
            let totalXDist = -totalXDist;
        } else {
            let xNeg = false;
        }

        if (totalYDist < 0) {
            let yNeg = true;
            let totalYDist = -totalYDist;
        } else {
            let yNeg = false;
        }

        let diff = 0;
        while ((xDist < totalXDist) & (yDist < totalYDist)) {
            // down and right
            if ((~xNeg) & (~yNeg)) {
                do Screen.drawPixel(x1 + xDist, y1 + yDist);
            }
            // up and right
            if ((~xNeg) & (yNeg)) {
                do Screen.drawPixel(x1 + xDist, y1 - yDist);
            }
            // down and left
            if ((xNeg) & (~yNeg)) {
                do Screen.drawPixel(x1 - xDist, y1 + yDist);
            }
            // up and left
            if ((xNeg) & (yNeg)) {
                do Screen.drawPixel(x1 - xDist, y1 - yDist);
            }

            if (diff < 0) {
                let xDist = xDist + 1;
                let diff = diff + totalYDist;
            } else {
                let yDist = yDist + 1;
                let diff = diff - totalXDist;
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        
        if (y2 - y1 < 0) { return; }
        if (x2 - x1 < 0) { return; }

        while (y1 < (y2 + 1)) {
            do Screen.drawHorizontalLine(x1, x2, y1);
            let y1 = y1 + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy, rSquared, horizontal;

        // handle overflow
        if (r > 181) { return; }
        if (r < 0) { return; }

        let rSquared = Math.multiply(r, r);
        let dy = -r;
        while (dy < (r + 1)) {
            let horizontal = Math.sqrt(rSquared - Math.multiply(dy, dy));
            do Screen.drawHorizontalLine(x - horizontal, x + horizontal, y + dy);
            let dy = dy + 1;
        }
        return;
    }
}
