// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    static Array twoToThe;

    /** Initializes the library. */
    function void init() {
        var int ii, sum, powerOfTwo;

        let twoToThe = Array.new(16);
        let ii = 0;
        let sum = 1;
        while (ii < 16) {
            let twoToThe[ii] = sum;
            let sum = sum + sum;
            let ii = ii + 1;
        }
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            return -x;
        } else {
            return x;
        }
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shiftedX, ii, width;
        let width = 16;
        let sum = 0;
        let ii = 0;
        let shiftedX = x;
        while (ii < width) {
            if (~((twoToThe[ii] & y) = 0)) {
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let ii = ii + 1;
        }
        return sum;

    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int q, res;
        var bool is_neg;

        let is_neg = false;
        if (x < 0) {
            let x = -x;
            let is_neg = ~is_neg;
        }
        if (y < 0) {
            let y = -y;
            let is_neg = ~is_neg;
        }

        if ((y > x) | (y < 0)) {
            return 0;
        }

        let q = Math.divide(x, y + y);
        if ((x - (2 * q * y)) < y) {
            let res = 2 * q;
            if (is_neg) { return -res; } else { return res; }
        } else {
            let res = 2 * q + 1;
            if (is_neg) { return -res; } else { return res; }
        }
    }
    // q = divide(9, 3) = 3
    // x = 9, y = 3
    // 9 - (2 * 1 * 3) < 3? 3 < 3? NO -> return 2 * 1 + 1 = 3
    // q = divide(9, 6) = 1
    //   x = 9, y = 6
    //   9 - (2 * 0 * 6) < 6? 9 < 6? NO -> return 1
    //   q = divide(9, 12) = 0
    //     x = 9, y = 12
    //     y > x? YES -> return 0

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int n, jj, y, temp, squared;
        let n = 16;
        let jj = n / 2 - 1;
        let y = 0;

        while (jj > -1) {
            let temp = y + twoToThe[jj];
            let squared = Math.multiply(temp, temp);

            if (((squared < x) | (squared = x)) & (squared > 0)) {
                let y = y + twoToThe[jj];
            }

            let jj = jj - 1;
        }
        return y;
    }
    // x = 9
    //   y=0; j=7; temp=0+128; squared=16384
    //   y=0; j=6; temp=0+64; squared=4096
    //   y=0; j=5; temp=0+32; squared=1024
    //   y=0; j=4; temp=0+16; squared=256
    //   y=0; j=3; temp=0+8; squared=64
    //   y=0; j=2; temp=0+4; squared=16
    //   y=0; j=1; temp=0+2; squared=4 -> y=0+2
    //   y=2; j=0; temp=2+1; squared=9 -> y=2+1


    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        } else {
            return b;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a > b) {
            return b;
        } else {
            return a;
        }
    }
}